# Counter Actor GraphQL Schema
# This demonstrates how the CounterActor API could be represented
# using GraphQL Schema Definition Language for flexible query interfaces.

"""
Counter Actor type representing a stateful counter with persistent state.
Each actor instance maintains an independent counter value.
"""
type CounterActor {
  """Unique identifier for this actor instance"""
  id: ID!
  
  """Current counter value"""
  value: Int!
  
  """Timestamp when the actor was last updated"""
  lastUpdated: String
  
  """Actor type identifier"""
  actorType: String!
}

"""
Input type for setting a specific counter value
"""
input SetCounterInput {
  """The actor instance ID"""
  actorId: ID!
  
  """The value to set the counter to"""
  value: Int!
}

"""
Input type for actor operations that only require an ID
"""
input ActorInput {
  """The actor instance ID"""
  actorId: ID!
}

"""
Response type for operations that might fail
"""
type OperationResult {
  """Whether the operation was successful"""
  success: Boolean!
  
  """The updated counter actor (if successful)"""
  actor: CounterActor
  
  """Error message (if failed)"""
  error: String
  
  """Error code for programmatic handling"""
  errorCode: String
}

"""
Root Query type for read operations
"""
type Query {
  """
  Get a counter actor by ID.
  Returns null if the actor doesn't exist (which means value = 0).
  """
  counterActor(id: ID!): CounterActor
  
  """
  Get multiple counter actors by their IDs
  """
  counterActors(ids: [ID!]!): [CounterActor]!
  
  """
  Get the current value of a counter actor
  """
  getCounterValue(actorId: ID!): Int!
}

"""
Root Mutation type for write operations
"""
type Mutation {
  """
  Increment the counter by 1
  """
  incrementCounter(input: ActorInput!): OperationResult!
  
  """
  Decrement the counter by 1
  """
  decrementCounter(input: ActorInput!): OperationResult!
  
  """
  Set the counter to a specific value
  """
  setCounterValue(input: SetCounterInput!): OperationResult!
  
  """
  Reset the counter to zero
  """
  resetCounter(input: ActorInput!): OperationResult!
}

"""
Subscription type for real-time updates
"""
type Subscription {
  """
  Subscribe to counter value changes for a specific actor
  """
  counterUpdated(actorId: ID!): CounterActor!
  
  """
  Subscribe to all counter actor changes
  """
  allCountersUpdated: CounterActor!
}

"""
Custom scalar for validation
"""
scalar ActorID

"""
Enum for different error types
"""
enum ErrorCode {
  INVALID_INPUT
  ACTOR_NOT_FOUND
  INTERNAL_ERROR
  VALIDATION_ERROR
}

"""
Interface for all actor types (for future extensibility)
"""
interface Actor {
  """Unique identifier for this actor instance"""
  id: ID!
  
  """Actor type identifier"""
  actorType: String!
  
  """Timestamp when the actor was last updated"""
  lastUpdated: String
}