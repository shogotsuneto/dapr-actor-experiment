openapi: 3.0.3
info:
  title: CounterActor API
  description: |
    Dapr Actor API specification for the CounterActor.
    
    This actor provides stateful counter operations with persistent state
    managed by Dapr's state store. Each actor instance maintains an independent
    counter value identified by the actor ID.
    
    **Actor Pattern**: This follows the Dapr actor pattern where:
    - Each actor has a unique ID within the actor type
    - Actor state is automatically persisted
    - Methods are invoked through HTTP requests to the Dapr sidecar
    
    **Generated from**: This specification serves as the contract-first definition
    for generating Go interfaces and types.
  version: 1.0.0
  contact:
    name: Dapr Actor Experiment
    url: https://github.com/shogotsuneto/dapr-actor-experiment
  license:
    name: MIT

servers:
  - url: http://localhost:3500/v1.0/actors/CounterActor
    description: Local Dapr sidecar (default configuration)

paths:
  /{actorId}/method/get:
    get:
      summary: Get current counter value
      description: |
        Retrieves the current value of the counter for this actor instance.
        If the actor has never been used, returns 0 as the default value.
      tags:
        - "ActorType:CounterActor"
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: Current counter value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterState'
              example:
                value: 42
        '500':
          description: Internal server error

  /{actorId}/method/increment:
    post:
      summary: Increment counter by 1
      description: |
        Increases the counter value by 1 and returns the new value.
        This operation is atomic and thread-safe within the actor instance.
      tags:
        - "ActorType:CounterActor"
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: Counter incremented successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterState'
              example:
                value: 43
        '500':
          description: Internal server error

  /{actorId}/method/decrement:
    post:
      summary: Decrement counter by 1
      description: |
        Decreases the counter value by 1 and returns the new value.
        This operation is atomic and thread-safe within the actor instance.
      tags:
        - "ActorType:CounterActor"
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: Counter decremented successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterState'
              example:
                value: 41
        '500':
          description: Internal server error

  /{actorId}/method/set:
    post:
      summary: Set counter to specific value
      description: |
        Sets the counter to a specific value provided in the request body.
        This completely replaces the current counter value.
      tags:
        - "ActorType:CounterActor"
      parameters:
        - $ref: '#/components/parameters/ActorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetValueRequest'
            example:
              value: 100
      responses:
        '200':
          description: Counter value set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterState'
              example:
                value: 100
        '500':
          description: Internal server error

components:
  parameters:
    ActorId:
      name: actorId
      in: path
      required: true
      description: |
        Unique identifier for the actor instance. Each actor ID maintains
        independent state. Common patterns include:
        - `counter-1`, `counter-2` for numbered instances
        - `user-123` for user-specific counters
        - `session-abc` for session-based counters
      schema:
        type: string
        pattern: '^[a-zA-Z0-9_-]+$'
        minLength: 1
        maxLength: 50
      example: "counter-1"

  schemas:
    CounterState:
      type: object
      description: Current state of the counter actor
      required:
        - value
      properties:
        value:
          type: integer
          format: int32
          description: The current counter value
          example: 42
      additionalProperties: false

    SetValueRequest:
      type: object
      description: Request to set the counter to a specific value
      required:
        - value
      properties:
        value:
          type: integer
          format: int32
          description: The value to set the counter to
          minimum: -2147483648
          maximum: 2147483647
          example: 100
      additionalProperties: false