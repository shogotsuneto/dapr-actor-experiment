asyncapi: '3.0.0'
info:
  title: CounterActor Event API
  version: '1.0.0'
  description: |
    Event-driven API specification for CounterActor using AsyncAPI.
    
    This demonstrates how actor state changes and method invocations 
    could be modeled as asynchronous events for event-sourcing or 
    event-driven architectures.
    
    **Note**: This is primarily for demonstration of AsyncAPI concepts.
    The current Dapr actor implementation uses synchronous HTTP calls.
  contact:
    name: Dapr Actor Experiment
    url: https://github.com/shogotsuneto/dapr-actor-experiment

servers:
  development:
    host: localhost:6379
    protocol: redis
    description: Local Redis for event streaming
  
  production:
    host: redis-cluster.example.com:6379
    protocol: redis
    description: Production Redis cluster

channels:
  counterActor/commands:
    address: 'counter-actor-commands'
    description: Channel for sending commands to counter actors
    messages:
      incrementCommand:
        $ref: '#/components/messages/IncrementCommand'
      decrementCommand:
        $ref: '#/components/messages/DecrementCommand'
      setValueCommand:
        $ref: '#/components/messages/SetValueCommand'
      getValueCommand:
        $ref: '#/components/messages/GetValueCommand'
  
  counterActor/events:
    address: 'counter-actor-events'
    description: Channel for counter actor state change events
    messages:
      counterIncremented:
        $ref: '#/components/messages/CounterIncremented'
      counterDecremented:
        $ref: '#/components/messages/CounterDecremented'
      counterValueSet:
        $ref: '#/components/messages/CounterValueSet'
      counterValueRead:
        $ref: '#/components/messages/CounterValueRead'
  
  counterActor/errors:
    address: 'counter-actor-errors'
    description: Channel for error events
    messages:
      operationFailed:
        $ref: '#/components/messages/OperationFailed'

operations:
  sendIncrementCommand:
    action: send
    channel:
      $ref: '#/channels/counterActor~1commands'
    messages:
      - $ref: '#/channels/counterActor~1commands/messages/incrementCommand'
  
  sendDecrementCommand:
    action: send
    channel:
      $ref: '#/channels/counterActor~1commands'
    messages:
      - $ref: '#/channels/counterActor~1commands/messages/decrementCommand'
  
  sendSetValueCommand:
    action: send
    channel:
      $ref: '#/channels/counterActor~1commands'
    messages:
      - $ref: '#/channels/counterActor~1commands/messages/setValueCommand'
  
  receiveCounterEvents:
    action: receive
    channel:
      $ref: '#/channels/counterActor~1events'
    messages:
      - $ref: '#/channels/counterActor~1events/messages/counterIncremented'
      - $ref: '#/channels/counterActor~1events/messages/counterDecremented'
      - $ref: '#/channels/counterActor~1events/messages/counterValueSet'

components:
  messages:
    IncrementCommand:
      name: IncrementCommand
      title: Increment Counter Command
      summary: Command to increment a counter actor
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ActorCommand'
      examples:
        - payload:
            actorId: "counter-1"
            command: "increment"
            timestamp: "2024-01-15T10:30:00Z"
            requestId: "req-123"
    
    DecrementCommand:
      name: DecrementCommand
      title: Decrement Counter Command
      summary: Command to decrement a counter actor
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ActorCommand'
    
    SetValueCommand:
      name: SetValueCommand
      title: Set Value Command
      summary: Command to set counter to specific value
      contentType: application/json
      payload:
        $ref: '#/components/schemas/SetValueCommand'
      examples:
        - payload:
            actorId: "counter-1"
            command: "set"
            value: 42
            timestamp: "2024-01-15T10:30:00Z"
            requestId: "req-124"
    
    GetValueCommand:
      name: GetValueCommand
      title: Get Value Command
      summary: Command to get current counter value
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ActorCommand'
    
    CounterIncremented:
      name: CounterIncremented
      title: Counter Incremented Event
      summary: Event emitted when counter is incremented
      contentType: application/json
      payload:
        $ref: '#/components/schemas/CounterEvent'
      examples:
        - payload:
            actorId: "counter-1"
            eventType: "incremented"
            previousValue: 41
            newValue: 42
            timestamp: "2024-01-15T10:30:01Z"
            requestId: "req-123"
    
    CounterDecremented:
      name: CounterDecremented
      title: Counter Decremented Event
      summary: Event emitted when counter is decremented
      contentType: application/json
      payload:
        $ref: '#/components/schemas/CounterEvent'
    
    CounterValueSet:
      name: CounterValueSet
      title: Counter Value Set Event
      summary: Event emitted when counter value is set
      contentType: application/json
      payload:
        $ref: '#/components/schemas/CounterEvent'
    
    CounterValueRead:
      name: CounterValueRead
      title: Counter Value Read Event
      summary: Event emitted when counter value is read
      contentType: application/json
      payload:
        $ref: '#/components/schemas/CounterEvent'
    
    OperationFailed:
      name: OperationFailed
      title: Operation Failed Event
      summary: Event emitted when an operation fails
      contentType: application/json
      payload:
        $ref: '#/components/schemas/ErrorEvent'

  schemas:
    ActorCommand:
      type: object
      title: Actor Command
      description: Base command structure for actor operations
      required:
        - actorId
        - command
        - timestamp
        - requestId
      properties:
        actorId:
          type: string
          description: Unique identifier for the actor instance
          pattern: '^[a-zA-Z0-9_-]+$'
          examples: ["counter-1", "counter-2"]
        command:
          type: string
          description: The command to execute
          enum: ["increment", "decrement", "get"]
        timestamp:
          type: string
          format: date-time
          description: When the command was issued
        requestId:
          type: string
          description: Unique identifier for request tracking
    
    SetValueCommand:
      allOf:
        - $ref: '#/components/schemas/ActorCommand'
        - type: object
          properties:
            command:
              type: string
              const: "set"
            value:
              type: integer
              format: int32
              description: The value to set the counter to
              minimum: -2147483648
              maximum: 2147483647
          required:
            - value
    
    CounterEvent:
      type: object
      title: Counter Event
      description: Event representing a counter state change
      required:
        - actorId
        - eventType
        - newValue
        - timestamp
      properties:
        actorId:
          type: string
          description: Unique identifier for the actor instance
          pattern: '^[a-zA-Z0-9_-]+$'
        eventType:
          type: string
          description: Type of event
          enum: ["incremented", "decremented", "valueSet", "valueRead"]
        previousValue:
          type: integer
          format: int32
          description: Previous counter value (null for initial state)
        newValue:
          type: integer
          format: int32
          description: New counter value
        timestamp:
          type: string
          format: date-time
          description: When the event occurred
        requestId:
          type: string
          description: Request ID that triggered this event
    
    ErrorEvent:
      type: object
      title: Error Event
      description: Event representing an operation failure
      required:
        - actorId
        - error
        - timestamp
      properties:
        actorId:
          type: string
          description: Actor instance that failed
        error:
          type: string
          description: Human-readable error message
        errorCode:
          type: string
          description: Machine-readable error code
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
        requestId:
          type: string
          description: Request ID that caused the error