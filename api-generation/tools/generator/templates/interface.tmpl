// Package {{.PackageName}} provides primitives for OpenAPI-based contract validation.
//
// Code generated from OpenAPI specification. DO NOT EDIT manually.
package {{.PackageName}}

import (
	"context"
	"fmt"
	"github.com/dapr/go-sdk/actor"
)

{{range .Actors}}
// ActorType{{.ActorType}} is the Dapr actor type identifier for {{.ActorType}}
const ActorType{{.ActorType}} = "{{.ActorType}}"

{{end}}

{{range .Actors}}
// {{.InterfaceName}} {{.InterfaceDesc}}.
// This interface enforces compile-time contract compliance.
type {{.InterfaceName}} interface {
{{- range .Methods}}
	// {{.Comment}}
	{{.Name}}(ctx context.Context{{if .HasRequest}}, request {{.RequestType}}{{end}}) (*{{.ReturnType}}, error)
{{- end}}
}

// New{{.ActorType}}FactoryContext creates a factory function for {{.ActorType}} with contract validation.
// The implementation parameter must implement {{.InterfaceName}} interface.
// Returns a factory function compatible with Dapr's RegisterActorImplFactoryContext.
// The generated factory ensures the actor Type() method returns the correct actor type.
func New{{.ActorType}}FactoryContext(implementation func() {{.InterfaceName}}) func() actor.ServerContext {
	return func() actor.ServerContext {
		// Compile-time check ensures the implementation satisfies the contract
		impl := implementation()
		
		// The implementation must also implement actor.ServerContext
		if serverCtx, ok := impl.(actor.ServerContext); ok {
			// Verify the actor type matches the contract
			if serverCtx.Type() != ActorType{{.ActorType}} {
				panic(fmt.Sprintf("actor implementation Type() returns '%s', expected '%s'", serverCtx.Type(), ActorType{{.ActorType}}))
			}
			return serverCtx
		}
		
		// This should never happen if the actor is properly implemented
		panic("actor implementation must embed actor.ServerImplBaseCtx")
	}
}

{{end}}