// Package {{.PackageName}} provides primitives for OpenAPI-based contract validation.
//
// Code generated from OpenAPI specification. DO NOT EDIT manually.
package {{.PackageName}}

import (
	"github.com/dapr/go-sdk/actor"
)

// {{.InterfaceName}}Factory provides a type-safe factory for creating actor implementations
// that comply with the {{.InterfaceName}} interface.
type {{.InterfaceName}}Factory[T interface {
	{{.InterfaceName}}
	actor.ServerContext
}] struct{}

// New{{.InterfaceName}}Factory creates a new factory for the given implementation type.
// The implementation type T must satisfy both the {{.InterfaceName}} interface and actor.ServerContext.
func New{{.InterfaceName}}Factory[T interface {
	{{.InterfaceName}}
	actor.ServerContext
}]() *{{.InterfaceName}}Factory[T] {
	return &{{.InterfaceName}}Factory[T]{}
}

// CreateActorImplFactory returns a factory function that can be used with
// Dapr's RegisterActorImplFactoryContext method. This ensures compile-time
// type safety and contract compliance.
func (f *{{.InterfaceName}}Factory[T]) CreateActorImplFactory(newImpl func() T) func() actor.ServerContext {
	return func() actor.ServerContext {
		impl := newImpl()
		// Compile-time check to ensure T implements both the contract and actor.ServerContext
		var _ {{.InterfaceName}} = impl
		var _ actor.ServerContext = impl
		return impl
	}
}